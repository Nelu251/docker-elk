version: '3.5'
services:
  postgres:
    image: 'postgres:latest'
    container_name: postgres
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - elastic

  redis:
    image: 'redis:latest'
    container_name: redis
    ports:
      - '6379:6379'
    networks:
      - elastic

  movies-service:
    build: C:\Users\iturcanu\IdeaProjects\pad-project\movies-service
    container_name: movies-service
    ports:
      - '8080:8080'
    depends_on:
      - 'postgres'
      - 'redis'
    environment:
      server.port: 8080
      eureka.client.serviceUrl.defaultZone: http://discovery-service:8761/eureka/
    networks:
      - elastic

  mongo:
    image: 'mongo:latest'
    container_name: users
    command: mongod --port 27018
    ports:
      - '27018:27018'
    networks:
      - elastic


  auth-service:
    build: C:\Users\iturcanu\IdeaProjects\pad-project\auth-service
    container_name: auth-service
    ports:
      - '8081:8081'
    environment:
      server.port: 8081
      eureka.client.serviceUrl.defaultZone: http://discovery-service:8761/eureka/
    depends_on:
      - 'mongo'
    networks:
      - elastic


  discovery-service:
    build: C:\Users\iturcanu\IdeaProjects\pad-project\discovery-service
    container_name: discovery-service
    ports:
      - '8761:8761'
    networks:
      - elastic

  webapp1:
    image: ${DOCKER_REGISTRY-}webapp1
    build:
      context: C:\Users\iturcanu\source\repos\PAD_Lab
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:443;http://+:80
    ports:
      - "12346:80"
      - "12345:443"
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
    networks:
      - elastic

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.3.3
    container_name: elasticsearch_springboot
    environment:
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.type=single-node"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - elastic

  kibana:
    image: docker.elastic.co/kibana/kibana:8.3.3
    container_name: kibana_springboot
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    depends_on:
      - elasticsearch
    networks:
      - elastic

  logstash:
    image: docker.elastic.co/logstash/logstash:8.3.3
    container_name: logstash_springboot
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elastic
    depends_on:
      - elasticsearch

networks:
  elastic:
    driver: bridge

volumes:
  elasticsearch_data:
    driver: local